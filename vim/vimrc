" -------------------------------------------------------------------------------
" vim-plug
" Remember to run `PlugInstall`
" -------------------------------------------------------------------------------

" set the runtime path to include vim-plug and initialize
set rtp+=~/.vim/autoload/plug.vim
call plug#begin('~/.vim/vim_plug')
" easy alignment
Plug 'https://github.com/junegunn/vim-easy-align'
" calls any arbitrary Git command in vim
Plug 'https://github.com/tpope/vim-fugitive'
" tree dir
Plug 'https://github.com/preservim/nerdtree' |
      \ Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin'
" Plug 'https://github.com/ryanoasis/vim-devicons'
" Plug 'https://github.com/ryanoasis/nerd-fonts.git' cd zsh && ./install.sh
Plug 'https://github.com/tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'https://github.com/scrooloose/nerdtree-project-plugin'
Plug 'https://github.com/PhilRunninger/nerdtree-visual-selection'
" fuzzy file finder
Plug 'https://github.com/junegunn/fzf'
" auto-complete (deprecated, use `sudo pacman -S youcompleteme..` instead)
"Plug 'https://github.com/ycm-core/YouCompleteMe'
if has('nvim') " need 'pip3 install --user pynvim neovim' (maybe sudo) and vim compiled via python3
  Plug 'https://github.com/Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'https://github.com/Shougo/deoplete.nvim'
  Plug 'https://github.com/roxma/nvim-yarp'
  " Plug 'https://github.com/roxma/vim-hug-neovim-rpc'
endif
" template
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/honza/vim-snippets'
" deoplete python, need `pip3 install jedi --user` first
Plug 'https://github.com/zchee/deoplete-jedi'
" fast comment
Plug 'https://github.com/preservim/nerdcommenter'
" rainbow
Plug 'https://github.com/kien/rainbow_parentheses.vim'
" auto-pair
Plug 'https://github.com/jiangmiao/auto-pairs'
" auto-pep8 for python, need `pip3 install --user autopep8` first
Plug 'https://github.com/tell-k/vim-autopep8'
" indent line for python
Plug 'https://github.com/Yggdroot/indentLine'
" auto-jump
Plug 'https://github.com/ludovicchabant/vim-gutentags'
Plug 'https://github.com/vim-scripts/taglist.vim'
" zoom wimdow
Plug 'https://github.com/szw/vim-maximizer'
" airline
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
" background process runing
Plug 'https://github.com/skywind3000/asyncrun.vim'
" cpp check syntax, need `sudo apt-get install clang ctags && pip install cpplint` first | cpp highlight |
" .h .cpp exchange (:A :AV :AS) | cpp format (:ClangFormat) | deoplete cpp
Plug 'https://github.com/w0rp/ale'
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight'
Plug 'https://github.com/vim-scripts/a.vim'
Plug 'https://github.com/rhysd/vim-clang-format'
Plug 'https://github.com/Shougo/deoplete-clangx'
" sidebar
Plug 'https://github.com/mhinz/vim-signify'
" comment
Plug 'https://github.com/tpope/vim-commentary'
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'https://github.com/iamcco/mathjax-support-for-mkdp'
Plug 'https://github.com/iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" markdown setting
Plug 'https://github.com/mzlogin/vim-markdown-toc' " 自动在当前光标生成目录的插件
Plug 'https://github.com/godlygeek/tabular' "必要插件，安装在vim-markdown前面
Plug 'https://github.com/plasticboy/vim-markdown' " Markdown语法高亮 段落折叠，查看目录，段间跳转

" This Vim plugin will help switching between companion files (e.g. .h and .cpp files)
Plug 'https://github.com/derekwyatt/vim-fswitch'

" cpp debugging, need vim8.2+
Plug 'https://github.com/puremourning/vimspector'

" This plugin provides a start screen for Vim and Neovim.
Plug 'https://github.com/itchyny/vim-gitbranch'
Plug 'https://github.com/mhinz/vim-startify'

" Color formatter with ANSI escape sequences like \033[31m
" Usage: vim -R +AnsiEsc file
Plug 'https://github.com/vim-scripts/AnsiEsc.vim'

" Copilot
Plug 'https://github.com/github/copilot.vim.git', { 'branch': 'release' }

" Debugger
" Remember to run `:VimspectorInstall --all`
Plug 'puremourning/vimspector'

" All of your Plugins must be added before the following line
call plug#end()            " required

filetype on
filetype plugin indent on    " loading the plugin/indent files for specific file types

" fzf: https://segmentfault.com/a/1190000016186540
" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'
" open selected file in new tab (vsplited/hsplited) or buffer
let g:fzf_action = { 'enter': 'edit' , '-': 'split', 'T': 'tabedit', 'V': 'vsplit'}

" gutentags will stop recursing to the upper directory when it encounters these file/dir names
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" The name of the generated data file
let g:gutentags_ctags_tagfile = '.tags'
" Put all the automatically generated tags files into the ~/.cache/tags directory to avoid polluting the project directory
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" Check ~/.cache/tags, create a new one if it does not exist
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
" Create tags for python packages in conda env
" # (激活 conda 环境后)
" CONDA_ENV_NAME=$(basename "$CONDA_PREFIX")
" CONDA_SITE_PACKAGES_PATH="$CONDA_PREFIX/lib/python$(python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')/site-packages"
" VIM_TAGS_DIR="$HOME/.cache/tags"
" mkdir -p "$VIM_TAGS_DIR"
" CONDA_TAGS_FILE="${VIM_TAGS_DIR}/${CONDA_ENV_NAME}_python_libs.tags"
" ctags -R -f "$CONDA_TAGS_FILE" \
"   --languages="python" \
"   --python-kinds="+cfmp" \
"   --exclude='*.pyc' --exclude='*.pyo' --exclude='__pycache__/*' \
"   "$CONDA_SITE_PACKAGES_PATH"
let conda_prefix = $CONDA_PREFIX
if !empty(conda_prefix)
    let conda_env_name = fnamemodify(conda_prefix, ':t')
    let conda_tags_file = expand('~/.cache/tags/') . conda_env_name . '_python_libs.tags'
    if filereadable(conda_tags_file)
        " 将 Conda 环境的 tags 文件路径追加到 Vim 的 tags 搜索路径中
        let &tags = &tags . ',' . fnameescape(conda_tags_file)
        " 你可以通过 :echo &tags 来查看最终的 tags 路径列表
    else
        " 可选：如果 tags 文件不存在，给个提示
        echom "Gutentags: Conda tags file not found for " . conda_env_name . ": " . conda_tags_file
    endif
endif
" Configure ctags parameters
let g:gutentags_ctags_extra_args = ['--fields=+niazSlm', '--extra=+q']
let g:gutentags_ctags_extra_args = ['--recurse=yes', '--exclude=.git', '--exclude=fc_base', '--exclude=build', '--exclude=exp']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px', '--python-kinds=-i']
" generate new tags if you just finished writing a new file
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0

" Zoom / Restore window.
" Whether Maximizer should set default mappings or not
let g:maximizer_set_default_mapping = 1
" Whether Maximizer should set default mappings with banged version or not
let g:maximizer_set_mapping_with_bang = 0
" The default mappings key
let g:maximizer_default_mapping_key = '<F4>'

" airline
" This is disabled by default; add the following to your vimrc to enable the extension
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="solarized"
let g:airline_solarized_bg='dark'
" Separators can be configured independently for the tabline, so here is how you can define straight tabs:
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
" do not count withspace
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline_powerline_fonts = 0

" auto-complete
let g:deoplete#enable_at_startup = 1
" Do not use <tab> if you use YouCompleteMe
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Quickfix window for background runing
let g:asyncrun_open = 8

" ale cppcheck
"使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
let g:ale_linters = {
            \ 'c': ['clang', 'gcc'],
            \ 'cpp': ['cpplint', 'clang++', 'g++'],
            \ 'python': ['flake8'],
            \ 'cmake': ['cmakelint']
            \ }
let g:ale_fixers = {
            \ '*': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'python': ['autopep8', 'isort'],
            \ 'cmake': ['cmakeformat']
            \ }
let g:ale_c_cc_options = '-Wall -O2 -std=c99 -isystem
            \ -I .
            \ -I /usr/include
            \ -I /usr/local/include'
let g:ale_cpp_cc_options = '-Wall -O2 -std=c++11 -isystem
            \ -I .
            \ -I /usr/include
            \ -I /usr/local/include'
let g:ale_cpp_cpplint_options = '-Wall -O2 -std=c++11 -isystem
            \ -I .
            \ -I /usr/include
            \ -I /usr/local/include'
let g:ale_python_auto_pipenv = 1
let g:ale_python_auto_poetry = 1
let g:ale_python_flake8_auto_pipenv = 1
"let g:ale_python_pylint_auto_pipenv = 1
"let g:ale_python_pylint_use_msg_id = 1
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters_explicit = 1  " 只显示运行ale_linters的文件
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'  " 防止YCM不停补全
let g:ale_lint_on_insert_leave = 1
let g:ale_set_highlights = 0

" markdown 开启latex公式 和 YAML语法
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter=1

" Vim-markdown-toc 取消储存时自动更新目录
let g:vmt_auto_update_on_save = 0

" nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
" startify
let g:startify_session_dir = expand('~/.vim/session')

" Copilot proxy
" let g:copilot_proxy = '10.103.132.22:7890'

" Vimspector
let g:vimspector_enable_mappings = 'HUMAN'

" -------------------------------------------------------------------------------
" Common
" -------------------------------------------------------------------------------

" vim-signify
set signcolumn=yes  " 强制显示侧边栏，防止时有时无

" scheme
if has("termguicolors")
  " fix bug for vim
  set t_8f=[38;2;%lu;%lu;%lum
  set t_8b=[48;2;%lu;%lu;%lum
  set t_Co=256
  " enable true color
  set termguicolors
  " https://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
  set t_ut=
endif
set background=dark
if v:version < 801
 let g:solarized_termcolors=256
 let g:solarized_termtrans=1
endif
colorscheme solarized8

" File encoding
set nu  " Set the line number
syntax on  " Syntax highlighting
"set autochdir  " Set the current dir as thr work dir

" Tab and Indent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set expandtab  " Use the space to instead of tab
set autoindent  " Copy indent from current line when starting a new line
set smartindent " auto indent
set cindent     " auto indent for cpp files

" Seach and Match
set hlsearch  " Highlight the search result
set incsearch  " Real-time search
set ignorecase
set smartcase
set showmatch  " When a bracket is inserted, briefly jump to the matching one

" Display
set showmode  " Show the current mode

" Display tab and trail space
set list
set listchars=tab:>-,trail:.

" Other
" set nobackup
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/backup
set encoding=utf-8
set fileencodings=utf-8,gb18030,cp936,big5 " Set the encode
set termencoding=utf-8
set enc=utf8
set pastetoggle=<F10>  " Bind `F10` to `:set paste`
set backspace=2 " same as ":set backspace=indent,eol,start" in vim7.4
"set paste " Keep the original format of the pasted text

" Press `shift` while selecting with the mouse can disable into visual mode
" In mac os, hold `alt/option` is easier
" ref: http://stackoverflow.com/questions/4608161/copy-text-out-of-vim-with-set-mouse-a-enabled
if has('mouse')
  set mouse-=a  " Enable mouse
  set selection=exclusive
  set selectmode=mouse,key
endif

" fold code
set foldmethod=indent  " The kind of folding used for the current window
set foldlevel=99

" When moving the cursor up or down, at least the number of lines displayed above or below the cursor will remain
set scrolloff=50

" -------------------------------------------------------------------------------
" Enhanced
" -------------------------------------------------------------------------------

" 自动找到较低的目录层级，然后删除（否则自动生成的目录层级太多）
function RToc()
  exe "/-toc .* -->"
  let lstart=line('.')
  exe "/-toc -->"
  let lnum=line('.')
  execute lstart.",".lnum."g/           /d"
endfunction

" remember last edit position
autocmd BufWritePost $MYVIMRC source $MYVIMRC
autocmd BufReadPost *
                \ if line("'\"")>0&&line("'\"")<=line("$") |
                \   exe "normal g'\"" |
                \ endif

au BufRead,BufNewFile *.md,*.mkd,*.markdown set filetype=markdown  " .md default is modula2

" Auto add head info
" .py file auto add header
function HeaderPython()
    call setline(1, "#!/usr/bin/env python3")
    call append(1,  "# -*- coding: utf-8 -*-")
    call append(2,  "# Copyright [" . strftime('%Y-%m-%d', localtime()) . "] <sxc19@mails.tsinghua.edu.cn, Xingchen Song>")
    normal G
    normal o
endf
autocmd bufnewfile *.py call HeaderPython()

" .sh file auto add header
function HeaderBash()
    call setline(1, "#!/bin/bash")
    call append(1,  "# Copyright [" . strftime('%Y-%m-%d', localtime()) . "] <sxc19@mails.tsinghua.edu.cn, Xingchen Song>")
    normal G
    normal o
endf
autocmd bufnewfile *.sh call HeaderBash()

" .cpp file auto add header
function HeaderCpp()
    call setline(1,  "// Copyright [" . strftime('%Y-%m-%d', localtime()) . "] <sxc19@mails.tsinghua.edu.cn, Xingchen Song>")
    call append(1,   "")
    call append(2,   "#include <bits/stdc++.h>")
    call append(3,   "using namespace std;")
    normal G
    normal o
endf
autocmd bufnewfile *.cc,*.cpp call HeaderCpp()

" .h file auto add header
function HeaderH()
    call setline(1,  "// Copyright [" . strftime('%Y-%m-%d', localtime()) . "] <sxc19@mails.tsinghua.edu.cn, Xingchen Song>")
    call append(1,   "")
    call append(2,   "#ifndef ".toupper(expand("%:t:r"))."_H_")
    call append(3,   "#define ".toupper(expand("%:t:r"))."_H_")
    call append(4,   "")
    call append(5,   "#endif  // ".toupper(expand("%:t:r"))."_H_")
    normal G
endf
autocmd bufnewfile *.h,*.hpp call HeaderH()

" ref: http://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
autocmd FileType html set shiftwidth=2|set expandtab
autocmd FileType htmljinja setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType sh setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType java,c,cc,cpp,h,hpp setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType vim setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * silent NERDTreeMirror
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

"为python和shell等添加注释
autocmd FileType python,shell,coffee set commentstring=#\ %s
"修改注释风格
autocmd FileType java,c,cpp set commentstring=//\ %s

" rainbow always on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" auto-pep8 map to <F8>
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" returns all modified files of the current git repo
" `2>/dev/null` makes the command fail quietly, so that when we are not
" in a git repo, the list will be empty
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction
" Use NERDTree bookmarks
let NERDTreeShowBookmarks = 1
" Show files like '.gitignore'
let NERDTreeShowHidden=1
let g:startify_bookmarks = systemlist("cut -sd' ' -f 2- ~/.NERDTreeBookmarks")
" Display NERDTree bookmarks as a separate list
" Read ~/.NERDTreeBookmarks file and takes its second column
function! s:nerdtreeBookmarks()
    let bookmarks = systemlist("cut -d' ' -f 2- ~/.NERDTreeBookmarks")
    let bookmarks = bookmarks[0:-2] " Slices an empty last line
    return map(bookmarks, "{'line': v:val, 'path': v:val}")
endfunction
let g:startify_lists = [
\  { 'type': 'sessions',  'header': ['   Sessions']       },
\  { 'type': 'files',     'header': ['   MRU Files']            },
\  { 'type': function('s:gitModified'),  'header': ['   git modified']},
\  { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
\  { 'type': function('s:nerdtreeBookmarks'), 'header': ['   NERDTree Bookmarks']},
\  { 'type': 'commands', 'header': [ '   Commands' ] },
\  { 'type': function('helpers#startify#listcommits'), 'header': [ 'Recent Commits' ] },
\ ]
cabbrev SClose call helpers#startify#stopsession()
cabbrev SDelete call helpers#startify#deletesession()

" -------------------------------------------------------------------------------
" Bind Keys
" -------------------------------------------------------------------------------

" Highlight TODO/FIXME/XXX
"highlight myTODO cterm=bold term=bold ctermbg=yellow ctermfg=black
"match myTODO /\(TODO\|XXX\|FIXME\)/

if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
  endif
endif

" Multi-line indent
xnoremap < <gv
xnoremap > >gv

" jump back
nmap oo <C-o>
nmap ii <C-i>
" change window
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
" change tab
nmap H gT
nmap L gt
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt

" buffer https://harttle.land/2015/11/17/vim-buffer.html
set wildmenu wildmode=full
set wildchar=<Tab> wildcharm=<C-Z>
noremap <c-Right> :bn<CR>
noremap <c-Left> :bp<CR>
nmap <c-c> :bdelete<CR>

" jump to prev/next git diff
nmap <c-Up> [c
nmap <c-Down> ]c

" bind <F2> to open/close NERTree
map <F2> :NERDTreeToggle<CR>

" comment
map <leader>c :Commentary<CR>

" settings for auto-jump [https://www.reddit.com/r/vim/comments/d77t6j/guide_how_to_setup_ctags_with_gutentags_properly/]
" tag list window
map <silent> <F3> :TlistToggle<cr>

"asyncrun: 设置 F5 打开/关闭 Quickfix 窗口
nnoremap <F1> :call asyncrun#quickfix_toggle(6)<cr>

"ale: 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>s触发/关闭语法检查
nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
nmap <Leader>e :ALEDetail<CR>

" 同伴文件*.cpp 和 *.h 切换
nmap <silent> <Leader>sw :FSHere<cr>

" Execute python file being edited with <Shift> + e:
map <buffer> <S-e> :w<CR>:!/usr/bin/env python3 % <CR>

" Not display above list
nmap <leader>l :set list!<CR>

" fzf search, map to ctrl+f
nmap <c-f> :FZF 

" Debug
" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval
nmap <Leader><F11> <Plug>VimspectorUpFrame
nmap <Leader><F12> <Plug>VimspectorDownFrame
nmap <Leader>B     <Plug>VimspectorBreakpoints
nmap <Leader>D     <Plug>VimspectorDisassemble
